{"id":"node_modules/circomlib/src/pedersenHash.js","dependencies":[{"name":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/package.json","includedInParent":true,"mtime":1615340050722},{"name":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/.babelrc","includedInParent":true,"mtime":1615332365597},{"name":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/package.json","includedInParent":true,"mtime":1615335221010},{"name":"snarkjs","loc":{"line":2,"column":23},"parent":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/src/pedersenHash.js","resolved":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/snarkjs/index.js"},{"name":"./babyjub","loc":{"line":3,"column":24},"parent":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/src/pedersenHash.js","resolved":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/src/babyjub.js"},{"name":"blake-hash","loc":{"line":4,"column":32},"parent":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/src/pedersenHash.js","resolved":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/blake-hash/js.js"}],"generated":{"js":"const bn128 = require(\"snarkjs\").bn128;\nconst bigInt = require(\"snarkjs\").bigInt;\nconst babyJub = require(\"./babyjub\");\nconst createBlakeHash = require(\"blake-hash\");\n\nconst GENPOINT_PREFIX = \"PedersenGenerator\";\nconst windowSize = 4;\nconst nWindowsPerSegment = 50;\n\nexports.hash = pedersenHash;\nexports.getBasePoint = getBasePoint;\n\nfunction pedersenHash(msg) {\n    const bitsPerSegment = windowSize*nWindowsPerSegment;\n    const bits = buffer2bits(msg);\n\n    const nSegments = Math.floor((bits.length - 1)/(windowSize*nWindowsPerSegment)) +1;\n\n    let accP = [bigInt.zero,bigInt.one];\n\n    for (let s=0; s<nSegments; s++) {\n        let nWindows;\n        if (s == nSegments-1) {\n            nWindows = Math.floor(((bits.length - (nSegments - 1)*bitsPerSegment) - 1) / windowSize) +1;\n        } else {\n            nWindows = nWindowsPerSegment;\n        }\n        let escalar = bigInt.zero;\n        let exp = bigInt.one;\n        for (let w=0; w<nWindows; w++) {\n            let o = s*bitsPerSegment + w*windowSize;\n            let acc = bigInt.one;\n            for (let b=0; ((b<windowSize-1)&&(o<bits.length)) ; b++) {\n                if (bits[o]) {\n                    acc = acc.add( bigInt.one.shl(b) );\n                }\n                o++;\n            }\n            if (o<bits.length) {\n                if (bits[o]) {\n                    acc = acc.neg();\n                }\n                o++;\n            }\n            escalar = escalar.add(acc.mul(exp));\n            exp = exp.shl(windowSize+1);\n        }\n\n        if (escalar.lesser(bigInt.zero)) {\n            escalar = babyJub.subOrder.add(escalar);\n        }\n\n        accP = babyJub.addPoint(accP, babyJub.mulPointEscalar(getBasePoint(s), escalar));\n    }\n\n    return babyJub.packPoint(accP);\n}\n\nlet bases = [];\n\nfunction getBasePoint(pointIdx) {\n    if (pointIdx<bases.length) return bases[pointIdx];\n    let p= null;\n    let tryIdx = 0;\n    while (p==null) {\n        const S = GENPOINT_PREFIX + \"_\" + padLeftZeros(pointIdx, 32) + \"_\" + padLeftZeros(tryIdx, 32);\n        const h = createBlakeHash(\"blake256\").update(S).digest();\n        h[31] = h[31] & 0xBF;  // Set 255th bit to 0 (256th is the signal and 254th is the last possible bit to 1)\n        p = babyJub.unpackPoint(h);\n        tryIdx++;\n    }\n\n    const p8 = babyJub.mulPointEscalar(p, 8);\n\n    if (!babyJub.inSubgroup(p8)) {\n        throw new Error(\"Point not in curve\");\n    }\n\n    bases[pointIdx] = p8;\n    return p8;\n}\n\nfunction padLeftZeros(idx, n) {\n    let sidx = \"\" + idx;\n    while (sidx.length<n) sidx = \"0\"+sidx;\n    return sidx;\n}\n\n/*\nInput a buffer\nReturns an array of booleans. 0 is LSB of first byte and so on.\n */\nfunction buffer2bits(buff) {\n    const res = new Array(buff.length*8);\n    for (let i=0; i<buff.length; i++) {\n        const b = buff[i];\n        res[i*8] = b & 0x01;\n        res[i*8+1] = b & 0x02;\n        res[i*8+2] = b & 0x04;\n        res[i*8+3] = b & 0x08;\n        res[i*8+4] = b & 0x10;\n        res[i*8+5] = b & 0x20;\n        res[i*8+6] = b & 0x40;\n        res[i*8+7] = b & 0x80;\n    }\n    return res;\n}\n\n\n\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/circomlib/src/pedersenHash.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}}],"sources":{"node_modules/circomlib/src/pedersenHash.js":"const bn128 = require(\"snarkjs\").bn128;\nconst bigInt = require(\"snarkjs\").bigInt;\nconst babyJub = require(\"./babyjub\");\nconst createBlakeHash = require(\"blake-hash\");\n\nconst GENPOINT_PREFIX = \"PedersenGenerator\";\nconst windowSize = 4;\nconst nWindowsPerSegment = 50;\n\nexports.hash = pedersenHash;\nexports.getBasePoint = getBasePoint;\n\nfunction pedersenHash(msg) {\n    const bitsPerSegment = windowSize*nWindowsPerSegment;\n    const bits = buffer2bits(msg);\n\n    const nSegments = Math.floor((bits.length - 1)/(windowSize*nWindowsPerSegment)) +1;\n\n    let accP = [bigInt.zero,bigInt.one];\n\n    for (let s=0; s<nSegments; s++) {\n        let nWindows;\n        if (s == nSegments-1) {\n            nWindows = Math.floor(((bits.length - (nSegments - 1)*bitsPerSegment) - 1) / windowSize) +1;\n        } else {\n            nWindows = nWindowsPerSegment;\n        }\n        let escalar = bigInt.zero;\n        let exp = bigInt.one;\n        for (let w=0; w<nWindows; w++) {\n            let o = s*bitsPerSegment + w*windowSize;\n            let acc = bigInt.one;\n            for (let b=0; ((b<windowSize-1)&&(o<bits.length)) ; b++) {\n                if (bits[o]) {\n                    acc = acc.add( bigInt.one.shl(b) );\n                }\n                o++;\n            }\n            if (o<bits.length) {\n                if (bits[o]) {\n                    acc = acc.neg();\n                }\n                o++;\n            }\n            escalar = escalar.add(acc.mul(exp));\n            exp = exp.shl(windowSize+1);\n        }\n\n        if (escalar.lesser(bigInt.zero)) {\n            escalar = babyJub.subOrder.add(escalar);\n        }\n\n        accP = babyJub.addPoint(accP, babyJub.mulPointEscalar(getBasePoint(s), escalar));\n    }\n\n    return babyJub.packPoint(accP);\n}\n\nlet bases = [];\n\nfunction getBasePoint(pointIdx) {\n    if (pointIdx<bases.length) return bases[pointIdx];\n    let p= null;\n    let tryIdx = 0;\n    while (p==null) {\n        const S = GENPOINT_PREFIX + \"_\" + padLeftZeros(pointIdx, 32) + \"_\" + padLeftZeros(tryIdx, 32);\n        const h = createBlakeHash(\"blake256\").update(S).digest();\n        h[31] = h[31] & 0xBF;  // Set 255th bit to 0 (256th is the signal and 254th is the last possible bit to 1)\n        p = babyJub.unpackPoint(h);\n        tryIdx++;\n    }\n\n    const p8 = babyJub.mulPointEscalar(p, 8);\n\n    if (!babyJub.inSubgroup(p8)) {\n        throw new Error(\"Point not in curve\");\n    }\n\n    bases[pointIdx] = p8;\n    return p8;\n}\n\nfunction padLeftZeros(idx, n) {\n    let sidx = \"\" + idx;\n    while (sidx.length<n) sidx = \"0\"+sidx;\n    return sidx;\n}\n\n/*\nInput a buffer\nReturns an array of booleans. 0 is LSB of first byte and so on.\n */\nfunction buffer2bits(buff) {\n    const res = new Array(buff.length*8);\n    for (let i=0; i<buff.length; i++) {\n        const b = buff[i];\n        res[i*8] = b & 0x01;\n        res[i*8+1] = b & 0x02;\n        res[i*8+2] = b & 0x04;\n        res[i*8+3] = b & 0x08;\n        res[i*8+4] = b & 0x10;\n        res[i*8+5] = b & 0x20;\n        res[i*8+6] = b & 0x40;\n        res[i*8+7] = b & 0x80;\n    }\n    return res;\n}\n\n\n\n\n"},"lineCount":112}},"error":null,"hash":"eccec8e5e96c4fa545b2b0f99687355f","cacheData":{"env":{}}}