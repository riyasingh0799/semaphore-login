{"id":"node_modules/circomlib/src/smt.js","dependencies":[{"name":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/package.json","includedInParent":true,"mtime":1615340050722},{"name":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/.babelrc","includedInParent":true,"mtime":1615332365597},{"name":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/package.json","includedInParent":true,"mtime":1615335221010},{"name":"snarkjs","loc":{"line":1,"column":23},"parent":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/src/smt.js","resolved":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/snarkjs/index.js"},{"name":"./smt_memdb","loc":{"line":3,"column":25},"parent":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/src/smt.js","resolved":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/src/smt_memdb.js"},{"name":"./smt_hashes_poseidon","loc":{"line":4,"column":31},"parent":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/src/smt.js","resolved":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/circomlib/src/smt_hashes_poseidon.js"}],"generated":{"js":"const bigInt = require(\"snarkjs\").bigInt;\n\nconst SMTMemDB = require(\"./smt_memdb\");\nconst {hash0, hash1} = require(\"./smt_hashes_poseidon\");\n\nclass SMT {\n\n    constructor(db, root) {\n        this.db = db;\n        this.root = root;\n    }\n\n    _splitBits(_key) {\n\n        let k = bigInt(_key);\n        const res = [];\n\n        while (!k.isZero()) {\n            if (k.isOdd()) {\n                res.push(true);\n            } else {\n                res.push(false);\n            }\n            k = k.shr(1);\n        }\n\n        while (res.length<256) res.push(false);\n\n        return res;\n    }\n\n    async update(_key, _newValue) {\n        const key = bigInt(_key);\n        const newValue = bigInt(_newValue);\n\n\n        const resFind = await this.find(key);\n        const res = {};\n        res.oldRoot = this.root;\n        res.oldKey = key;\n        res.oldValue = resFind.foundValue;\n        res.newKey = key;\n        res.newValue = newValue;\n        res.siblings = resFind.siblings;\n\n        const ins = [];\n        const dels = [];\n\n        let rtOld = hash1(key, resFind.foundValue);\n        let rtNew = hash1(key, newValue);\n        ins.push([rtNew, [1, key, newValue ]]);\n        dels.push(rtOld);\n\n        const keyBits = this._splitBits(key);\n        for (let level = resFind.siblings.length-1; level >=0; level--) {\n            let oldNode, newNode;\n            const sibling = resFind.siblings[level];\n            if (keyBits[level]) {\n                oldNode = [sibling, rtOld];\n                newNode = [sibling, rtNew];\n            } else {\n                oldNode = [rtOld, sibling];\n                newNode = [rtNew, sibling];\n            }\n            rtOld = hash0(oldNode[0], oldNode[1]);\n            rtNew = hash0(newNode[0], newNode[1]);\n            dels.push(rtOld);\n            ins.push([rtNew, newNode]);\n        }\n\n        res.newRoot = rtNew;\n\n        await this.db.multiIns(ins);\n        await this.db.setRoot(rtNew);\n        this.root = rtNew;\n        await this.db.multiDel(dels);\n\n        return res;\n    }\n\n    async delete(_key) {\n        const key = bigInt(_key);\n\n        const resFind = await this.find(key);\n        if (!resFind.found) throw new Error(\"Key does not exists\");\n\n        const res = {\n            siblings: [],\n            delKey: key,\n            delValue: resFind.foundValue\n        };\n\n        const dels = [];\n        const ins = [];\n        let rtOld = hash1(key, resFind.foundValue);\n        let rtNew;\n        dels.push(rtOld);\n\n        let mixed;\n        if (resFind.siblings.length > 0) {\n            const record = await this.db.get(resFind.siblings[resFind.siblings.length - 1]);\n            if ((record.length == 3)&&(record[0].equals(bigInt.one))) {\n                mixed = false;\n                res.oldKey = record[1];\n                res.oldValue = record[2];\n                res.isOld0 = false;\n                rtNew = resFind.siblings[resFind.siblings.length - 1];\n            } else if (record.length == 2) {\n                mixed = true;\n                res.oldKey = key;\n                res.oldValue = bigInt(0);\n                res.isOld0 = true;\n                rtNew = bigInt.zero;\n            } else {\n                throw new Error(\"Invalid node. Database corrupted\");\n            }\n        } else {\n            rtNew = bigInt.zero;\n            res.oldKey = key;\n            res.oldValue = bigInt(0);\n            res.isOld0 = true;\n        }\n\n        const keyBits = this._splitBits(key);\n\n        for (let level = resFind.siblings.length-1; level >=0; level--) {\n            let newSibling = resFind.siblings[level];\n            if ((level == resFind.siblings.length-1)&&(!res.isOld0)) {\n                newSibling = bigInt.zero;\n            }\n            const oldSibling = resFind.siblings[level];\n            if (keyBits[level]) {\n                rtOld = hash0(oldSibling, rtOld);\n            } else {\n                rtOld = hash0(rtOld, oldSibling);\n            }\n            dels.push(rtOld);\n            if (!newSibling.isZero()) {\n                mixed = true;\n            }\n\n            if (mixed) {\n                res.siblings.unshift(resFind.siblings[level]);\n                let newNode;\n                if (keyBits[level]) {\n                    newNode = [newSibling, rtNew];\n                } else {\n                    newNode = [rtNew, newSibling];\n                }\n                rtNew = hash0(newNode[0], newNode[1]);\n                ins.push([rtNew, newNode]);\n            }\n        }\n\n        await this.db.multiIns(ins);\n        await this.db.setRoot(rtNew);\n        this.root = rtNew;\n        await this.db.multiDel(dels);\n\n        res.newRoot = rtNew;\n        res.oldRoot = rtOld;\n\n        return res;\n    }\n\n    async insert(_key, _value) {\n        const key = bigInt(_key);\n        const value = bigInt(_value);\n        let addedOne = false;\n        const res = {};\n        res.oldRoot = this.root;\n        const newKeyBits = this._splitBits(key);\n\n        let rtOld;\n\n        const resFind = await this.find(key);\n\n        if (resFind.found) throw new Error(\"Key already exists\");\n\n        res.siblings = resFind.siblings;\n        let mixed;\n\n        if (!resFind.isOld0) {\n            const oldKeyits = this._splitBits(resFind.notFoundKey);\n            for (let i= res.siblings.length; oldKeyits[i] == newKeyBits[i]; i++) {\n                res.siblings.push(bigInt.zero);\n            }\n            rtOld = hash1(resFind.notFoundKey, resFind.notFoundValue);\n            res.siblings.push(rtOld);\n            addedOne = true;\n            mixed = false;\n        } else if (res.siblings.length >0) {\n            mixed = true;\n            rtOld = bigInt.zero;\n        }\n\n        const inserts = [];\n        const dels = [];\n\n        let rt = hash1(key, value);\n        inserts.push([rt,[1, key, value]] );\n\n        for (let i=res.siblings.length-1; i>=0; i--) {\n            if ((i<res.siblings.length-1)&&(!res.siblings[i].isZero())) {\n                mixed = true;\n            }\n            if (mixed) {\n                const oldSibling = resFind.siblings[i];\n                if (newKeyBits[i]) {\n                    rtOld = hash0(oldSibling, rtOld);\n                } else {\n                    rtOld = hash0(rtOld, oldSibling);\n                }\n                dels.push(rtOld);\n            }\n\n\n            let newRt;\n            if (newKeyBits[i]) {\n                newRt = hash0(res.siblings[i], rt);\n                inserts.push([newRt,[res.siblings[i], rt]] );\n            } else {\n                newRt = hash0(rt, res.siblings[i]);\n                inserts.push([newRt,[rt, res.siblings[i]]] );\n            }\n            rt = newRt;\n        }\n\n        if (addedOne) res.siblings.pop();\n        while ((res.siblings.length>0) && (res.siblings[res.siblings.length-1].isZero())) {\n            res.siblings.pop();\n        }\n        res.oldKey = resFind.notFoundKey;\n        res.oldValue = resFind.notFoundValue;\n        res.newRoot = rt;\n        res.isOld0 = resFind.isOld0;\n\n\n        await this.db.multiIns(inserts);\n        await this.db.setRoot(rt);\n        this.root = rt;\n        await this.db.multiDel(dels);\n\n        return res;\n    }\n\n    async find(key) {\n        const keyBits = this._splitBits(key);\n        return await this._find(key, keyBits, this.root, 0);\n    }\n\n    async _find(key, keyBits, root, level) {\n        if (typeof root === \"undefined\") root = this.root;\n\n        let res;\n        if (root.isZero()) {\n            res = {\n                found: false,\n                siblings: [],\n                notFoundKey: key,\n                notFoundValue: bigInt.zero,\n                isOld0: true\n            };\n            return res;\n        }\n\n        const record = await this.db.get(root);\n\n        if ((record.length==3)&&(record[0].equals(bigInt.one))) {\n            if (record[1].equals(key)) {\n                res = {\n                    found: true,\n                    siblings: [],\n                    foundValue: record[2],\n                    isOld0: false\n                };\n            } else {\n                res = {\n                    found: false,\n                    siblings: [],\n                    notFoundKey: record[1],\n                    notFoundValue: record[2],\n                    isOld0: false\n                };\n            }\n        } else {\n            if (keyBits[level] == 0) {\n                res = await this._find(key, keyBits, record[0], level+1);\n                res.siblings.unshift(record[1]);\n            } else {\n                res = await this._find(key, keyBits, record[1], level+1);\n                res.siblings.unshift(record[0]);\n            }\n        }\n        return res;\n    }\n}\n\nasync function loadFromFile(fileName) {\n\n}\n\nasync function newMemEmptyTrie() {\n    const db = new SMTMemDB();\n    const rt = await db.getRoot();\n    const smt = new SMT(db, rt);\n    return smt;\n}\n\nmodule.exports.loadFromFile = loadFromFile;\nmodule.exports.newMemEmptyTrie = newMemEmptyTrie;\nmodule.exports.SMT = SMT;\nmodule.exports.SMTMemDB = SMTMemDB;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/circomlib/src/smt.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/circomlib/src/smt.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}}],"sources":{"node_modules/circomlib/src/smt.js":"const bigInt = require(\"snarkjs\").bigInt;\n\nconst SMTMemDB = require(\"./smt_memdb\");\nconst {hash0, hash1} = require(\"./smt_hashes_poseidon\");\n\nclass SMT {\n\n    constructor(db, root) {\n        this.db = db;\n        this.root = root;\n    }\n\n    _splitBits(_key) {\n\n        let k = bigInt(_key);\n        const res = [];\n\n        while (!k.isZero()) {\n            if (k.isOdd()) {\n                res.push(true);\n            } else {\n                res.push(false);\n            }\n            k = k.shr(1);\n        }\n\n        while (res.length<256) res.push(false);\n\n        return res;\n    }\n\n    async update(_key, _newValue) {\n        const key = bigInt(_key);\n        const newValue = bigInt(_newValue);\n\n\n        const resFind = await this.find(key);\n        const res = {};\n        res.oldRoot = this.root;\n        res.oldKey = key;\n        res.oldValue = resFind.foundValue;\n        res.newKey = key;\n        res.newValue = newValue;\n        res.siblings = resFind.siblings;\n\n        const ins = [];\n        const dels = [];\n\n        let rtOld = hash1(key, resFind.foundValue);\n        let rtNew = hash1(key, newValue);\n        ins.push([rtNew, [1, key, newValue ]]);\n        dels.push(rtOld);\n\n        const keyBits = this._splitBits(key);\n        for (let level = resFind.siblings.length-1; level >=0; level--) {\n            let oldNode, newNode;\n            const sibling = resFind.siblings[level];\n            if (keyBits[level]) {\n                oldNode = [sibling, rtOld];\n                newNode = [sibling, rtNew];\n            } else {\n                oldNode = [rtOld, sibling];\n                newNode = [rtNew, sibling];\n            }\n            rtOld = hash0(oldNode[0], oldNode[1]);\n            rtNew = hash0(newNode[0], newNode[1]);\n            dels.push(rtOld);\n            ins.push([rtNew, newNode]);\n        }\n\n        res.newRoot = rtNew;\n\n        await this.db.multiIns(ins);\n        await this.db.setRoot(rtNew);\n        this.root = rtNew;\n        await this.db.multiDel(dels);\n\n        return res;\n    }\n\n    async delete(_key) {\n        const key = bigInt(_key);\n\n        const resFind = await this.find(key);\n        if (!resFind.found) throw new Error(\"Key does not exists\");\n\n        const res = {\n            siblings: [],\n            delKey: key,\n            delValue: resFind.foundValue\n        };\n\n        const dels = [];\n        const ins = [];\n        let rtOld = hash1(key, resFind.foundValue);\n        let rtNew;\n        dels.push(rtOld);\n\n        let mixed;\n        if (resFind.siblings.length > 0) {\n            const record = await this.db.get(resFind.siblings[resFind.siblings.length - 1]);\n            if ((record.length == 3)&&(record[0].equals(bigInt.one))) {\n                mixed = false;\n                res.oldKey = record[1];\n                res.oldValue = record[2];\n                res.isOld0 = false;\n                rtNew = resFind.siblings[resFind.siblings.length - 1];\n            } else if (record.length == 2) {\n                mixed = true;\n                res.oldKey = key;\n                res.oldValue = bigInt(0);\n                res.isOld0 = true;\n                rtNew = bigInt.zero;\n            } else {\n                throw new Error(\"Invalid node. Database corrupted\");\n            }\n        } else {\n            rtNew = bigInt.zero;\n            res.oldKey = key;\n            res.oldValue = bigInt(0);\n            res.isOld0 = true;\n        }\n\n        const keyBits = this._splitBits(key);\n\n        for (let level = resFind.siblings.length-1; level >=0; level--) {\n            let newSibling = resFind.siblings[level];\n            if ((level == resFind.siblings.length-1)&&(!res.isOld0)) {\n                newSibling = bigInt.zero;\n            }\n            const oldSibling = resFind.siblings[level];\n            if (keyBits[level]) {\n                rtOld = hash0(oldSibling, rtOld);\n            } else {\n                rtOld = hash0(rtOld, oldSibling);\n            }\n            dels.push(rtOld);\n            if (!newSibling.isZero()) {\n                mixed = true;\n            }\n\n            if (mixed) {\n                res.siblings.unshift(resFind.siblings[level]);\n                let newNode;\n                if (keyBits[level]) {\n                    newNode = [newSibling, rtNew];\n                } else {\n                    newNode = [rtNew, newSibling];\n                }\n                rtNew = hash0(newNode[0], newNode[1]);\n                ins.push([rtNew, newNode]);\n            }\n        }\n\n        await this.db.multiIns(ins);\n        await this.db.setRoot(rtNew);\n        this.root = rtNew;\n        await this.db.multiDel(dels);\n\n        res.newRoot = rtNew;\n        res.oldRoot = rtOld;\n\n        return res;\n    }\n\n    async insert(_key, _value) {\n        const key = bigInt(_key);\n        const value = bigInt(_value);\n        let addedOne = false;\n        const res = {};\n        res.oldRoot = this.root;\n        const newKeyBits = this._splitBits(key);\n\n        let rtOld;\n\n        const resFind = await this.find(key);\n\n        if (resFind.found) throw new Error(\"Key already exists\");\n\n        res.siblings = resFind.siblings;\n        let mixed;\n\n        if (!resFind.isOld0) {\n            const oldKeyits = this._splitBits(resFind.notFoundKey);\n            for (let i= res.siblings.length; oldKeyits[i] == newKeyBits[i]; i++) {\n                res.siblings.push(bigInt.zero);\n            }\n            rtOld = hash1(resFind.notFoundKey, resFind.notFoundValue);\n            res.siblings.push(rtOld);\n            addedOne = true;\n            mixed = false;\n        } else if (res.siblings.length >0) {\n            mixed = true;\n            rtOld = bigInt.zero;\n        }\n\n        const inserts = [];\n        const dels = [];\n\n        let rt = hash1(key, value);\n        inserts.push([rt,[1, key, value]] );\n\n        for (let i=res.siblings.length-1; i>=0; i--) {\n            if ((i<res.siblings.length-1)&&(!res.siblings[i].isZero())) {\n                mixed = true;\n            }\n            if (mixed) {\n                const oldSibling = resFind.siblings[i];\n                if (newKeyBits[i]) {\n                    rtOld = hash0(oldSibling, rtOld);\n                } else {\n                    rtOld = hash0(rtOld, oldSibling);\n                }\n                dels.push(rtOld);\n            }\n\n\n            let newRt;\n            if (newKeyBits[i]) {\n                newRt = hash0(res.siblings[i], rt);\n                inserts.push([newRt,[res.siblings[i], rt]] );\n            } else {\n                newRt = hash0(rt, res.siblings[i]);\n                inserts.push([newRt,[rt, res.siblings[i]]] );\n            }\n            rt = newRt;\n        }\n\n        if (addedOne) res.siblings.pop();\n        while ((res.siblings.length>0) && (res.siblings[res.siblings.length-1].isZero())) {\n            res.siblings.pop();\n        }\n        res.oldKey = resFind.notFoundKey;\n        res.oldValue = resFind.notFoundValue;\n        res.newRoot = rt;\n        res.isOld0 = resFind.isOld0;\n\n\n        await this.db.multiIns(inserts);\n        await this.db.setRoot(rt);\n        this.root = rt;\n        await this.db.multiDel(dels);\n\n        return res;\n    }\n\n    async find(key) {\n        const keyBits = this._splitBits(key);\n        return await this._find(key, keyBits, this.root, 0);\n    }\n\n    async _find(key, keyBits, root, level) {\n        if (typeof root === \"undefined\") root = this.root;\n\n        let res;\n        if (root.isZero()) {\n            res = {\n                found: false,\n                siblings: [],\n                notFoundKey: key,\n                notFoundValue: bigInt.zero,\n                isOld0: true\n            };\n            return res;\n        }\n\n        const record = await this.db.get(root);\n\n        if ((record.length==3)&&(record[0].equals(bigInt.one))) {\n            if (record[1].equals(key)) {\n                res = {\n                    found: true,\n                    siblings: [],\n                    foundValue: record[2],\n                    isOld0: false\n                };\n            } else {\n                res = {\n                    found: false,\n                    siblings: [],\n                    notFoundKey: record[1],\n                    notFoundValue: record[2],\n                    isOld0: false\n                };\n            }\n        } else {\n            if (keyBits[level] == 0) {\n                res = await this._find(key, keyBits, record[0], level+1);\n                res.siblings.unshift(record[1]);\n            } else {\n                res = await this._find(key, keyBits, record[1], level+1);\n                res.siblings.unshift(record[0]);\n            }\n        }\n        return res;\n    }\n}\n\nasync function loadFromFile(fileName) {\n\n}\n\nasync function newMemEmptyTrie() {\n    const db = new SMTMemDB();\n    const rt = await db.getRoot();\n    const smt = new SMT(db, rt);\n    return smt;\n}\n\nmodule.exports.loadFromFile = loadFromFile;\nmodule.exports.newMemEmptyTrie = newMemEmptyTrie;\nmodule.exports.SMT = SMT;\nmodule.exports.SMTMemDB = SMTMemDB;\n"},"lineCount":314}},"error":null,"hash":"448c459b3b99056114a40215f7a3554a","cacheData":{"env":{}}}