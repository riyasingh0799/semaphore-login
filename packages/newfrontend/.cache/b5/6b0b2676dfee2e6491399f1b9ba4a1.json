{"id":"node_modules/await-lock/build/AwaitLock.js","dependencies":[{"name":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/package.json","includedInParent":true,"mtime":1615340050722},{"name":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/.babelrc","includedInParent":true,"mtime":1615332365597},{"name":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/await-lock/package.json","includedInParent":true,"mtime":1615335220961},{"name":"assert","loc":{"line":5,"column":41},"parent":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/await-lock/build/AwaitLock.js","resolved":"/Users/riyasingh/myapps/semaphore-mini/packages/newfrontend/node_modules/node-libs-browser/node_modules/assert/assert.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst assert_1 = __importDefault(require(\"assert\"));\n/**\n * A mutex lock for coordination across async functions\n */\nclass AwaitLock {\n    constructor() {\n        this._acquired = false;\n        this._waitingResolvers = [];\n    }\n    /**\n     * Acquires the lock, waiting if necessary for it to become free if it is already locked. The\n     * returned promise is fulfilled once the lock is acquired.\n     *\n     * After acquiring the lock, you **must** call `release` when you are done with it.\n     */\n    acquireAsync() {\n        if (!this._acquired) {\n            this._acquired = true;\n            return Promise.resolve();\n        }\n        return new Promise(resolve => {\n            this._waitingResolvers.push(resolve);\n        });\n    }\n    /**\n     * Acquires the lock if it is free and otherwise returns immediately without waiting. Returns\n     * `true` if the lock was free and is now acquired, and `false` otherwise\n     */\n    tryAcquire() {\n        if (!this._acquired) {\n            this._acquired = true;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Releases the lock and gives it to the next waiting acquirer, if there is one. Each acquirer\n     * must release the lock exactly once.\n     */\n    release() {\n        assert_1.default(this._acquired, 'Trying to release an unacquired lock');\n        if (this._waitingResolvers.length > 0) {\n            let resolve = this._waitingResolvers.shift();\n            resolve();\n        }\n        else {\n            this._acquired = false;\n        }\n    }\n}\nmodule.exports = AwaitLock;\nmodule.exports.default = AwaitLock;\nObject.defineProperty(module.exports, \"__esModule\", { value: true });\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/await-lock/build/AwaitLock.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}}],"sources":{"node_modules/await-lock/build/AwaitLock.js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst assert_1 = __importDefault(require(\"assert\"));\n/**\n * A mutex lock for coordination across async functions\n */\nclass AwaitLock {\n    constructor() {\n        this._acquired = false;\n        this._waitingResolvers = [];\n    }\n    /**\n     * Acquires the lock, waiting if necessary for it to become free if it is already locked. The\n     * returned promise is fulfilled once the lock is acquired.\n     *\n     * After acquiring the lock, you **must** call `release` when you are done with it.\n     */\n    acquireAsync() {\n        if (!this._acquired) {\n            this._acquired = true;\n            return Promise.resolve();\n        }\n        return new Promise(resolve => {\n            this._waitingResolvers.push(resolve);\n        });\n    }\n    /**\n     * Acquires the lock if it is free and otherwise returns immediately without waiting. Returns\n     * `true` if the lock was free and is now acquired, and `false` otherwise\n     */\n    tryAcquire() {\n        if (!this._acquired) {\n            this._acquired = true;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Releases the lock and gives it to the next waiting acquirer, if there is one. Each acquirer\n     * must release the lock exactly once.\n     */\n    release() {\n        assert_1.default(this._acquired, 'Trying to release an unacquired lock');\n        if (this._waitingResolvers.length > 0) {\n            let resolve = this._waitingResolvers.shift();\n            resolve();\n        }\n        else {\n            this._acquired = false;\n        }\n    }\n}\nmodule.exports = AwaitLock;\nmodule.exports.default = AwaitLock;\nObject.defineProperty(module.exports, \"__esModule\", { value: true });\n"},"lineCount":58}},"error":null,"hash":"3c342163d33bcc2c4064cd62db191bd1","cacheData":{"env":{}}}