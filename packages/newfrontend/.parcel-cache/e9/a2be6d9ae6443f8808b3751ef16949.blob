var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require("react");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  require("./getWeb3");
  require("./getContractInstance");
  require("./abi/Semaphore.abi.json");
  require("./abi/Client.abi.json");
  require("libsemaphore");
  class App extends _react.Component {
    // constructor() {
    // super();
    // state = {
    // identity: "",
    // email: "",
    // web3: null,
    // accounts: null,
    // scContract: null,
    // isOwner: false,
    // pendingApprovals: 1000000000,
    // };
    // }
    // componentDidMount = async () => {
    // console.warn = () => {};
    // try {
    // // Get network provider and web3 instance.
    // const web3 = await getWeb3();
    // // Use web3 to get the user's accounts.
    // const accounts = await web3.eth.getAccounts();
    // const semaphoreAddress = ls.get('semaphoreAddr');
    // const scAddress = ls.get("scAddr");
    // const semaphoreContract = await getContractInstance(
    // web3,
    // semaphoreABI,
    // semaphoreAddress
    // );
    // const scContract = await getContractInstance(web3, ClientABI, scAddress);
    // console.log(scContract);
    // const identity = genIdentity();
    // const serialisedIdentity = serialiseIdentity(identity);
    // let identityCommitment = genIdentityCommitment(identity);
    // this.setState({
    // web3,
    // semaphoreContract,
    // scContract,
    // identity,
    // serialisedIdentity,
    // identityCommitment,
    // accounts,
    // });
    // var owner = await this.state.scContract.methods
    // .owner()
    // .call({ from: accounts[0] });
    // const isOwner =
    // owner.toString().trim().localeCompare(accounts[0].toString().trim()) ==
    // 0;
    // this.setState({ isOwner });
    // console.log("owner: " + owner);
    // console.log("account: " + accounts);
    // } catch (e) {
    // console.log(e);
    // }
    // };
    handleChange(e) {
      this.setState({
        [e.target.name]: e.target.value
      });
    }
    render() {
      if (!this.state.web3) {
        return (
          /*#__PURE__*/_reactDefault.default.createElement("div", null, "Loading Web3, accounts, and contract...")
        );
      }
      return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          className: "App"
        }, /*#__PURE__*/_reactDefault.default.createElement("head", null, /*#__PURE__*/_reactDefault.default.createElement("script", null, /*#__PURE__*/_reactDefault.default.createElement("link", {
          rel: "stylesheet"
        }))), /*#__PURE__*/_reactDefault.default.createElement("body", null, /*#__PURE__*/_reactDefault.default.createElement("h1", null, "MiniProject")))
      );
    }
  }
  exports.default = App;
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
