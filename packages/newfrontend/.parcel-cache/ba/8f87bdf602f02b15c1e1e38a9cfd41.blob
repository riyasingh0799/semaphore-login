var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _web = require("web3");
var _webDefault = _parcelHelpers.interopDefault(_web);
const getWeb3 = () => new Promise((resolve, reject) => {
  // Wait for loading completion to avoid race conditions with web3 injection timing.
  window.addEventListener("load", async () => {
    // Modern dapp browsers...
    if (window.ethereum) {
      const web3 = new _webDefault.default(window.ethereum);
      try {
        // Request account access if needed
        await window.ethereum.enable();
        // Acccounts now exposed
        resolve(web3);
      } catch (error) {
        reject(error);
      }
          // Legacy dapp browsers...
} else // Legacy dapp browsers...
    if (window.web3) {
      // Use Mist/MetaMask's provider.
      const web3 = window.web3;
      console.log("Injected web3 detected.");
      resolve(web3);
          // Fallback to localhost; use dev console port by default...
} else // Fallback to localhost; use dev console port by default...
    {
      const provider = new _webDefault.default.providers.HttpProvider("http://127.0.0.1:8545");
      const web3 = new _webDefault.default(provider);
      console.log("No web3 instance injected, using Local web3.");
      resolve(web3);
    }
  });
});
exports.default = getWeb3;
